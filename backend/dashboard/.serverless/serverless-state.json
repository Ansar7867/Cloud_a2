{
  "service": {
    "service": "weather",
    "serviceObject": {
      "name": "weather"
    },
    "provider": {
      "stage": "dev",
      "variableSyntax": "\\${([^{}]+?)}",
      "name": "aws",
      "memorySize": 128,
      "timeout": 30,
      "runtime": "python3.7",
      "region": "ap-southeast-2",
      "logRetentionInDays": 5,
      "versionFunctions": true,
      "remoteFunctionData": null,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "AddUnderscorescheduleLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/weather-dev-add_schedule",
              "RetentionInDays": 5
            }
          },
          "DeleteUnderscorescheduleLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/weather-dev-delete_schedule",
              "RetentionInDays": 5
            }
          },
          "DashboardLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/weather-dev-dashboard",
              "RetentionInDays": 5
            }
          },
          "ProfileUnderscorepictureLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/weather-dev-profile_picture",
              "RetentionInDays": 5
            }
          },
          "UpdateUnderscorescheduleLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/weather-dev-update_schedule",
              "RetentionInDays": 5
            }
          },
          "AddUnderscorescheduleLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/weather/dev/1590108345479-2020-05-22T00:45:45.479Z/add_schedule.zip"
              },
              "FunctionName": "weather-dev-add_schedule",
              "Handler": "add_schedule.lambda_handler",
              "MemorySize": 128,
              "Role": "arn:aws:iam::970396822222:role/lambda_basic_execution",
              "Runtime": "python3.7",
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "stage": "dev"
                }
              },
              "Layers": [
                "arn:aws:lambda:ap-southeast-2:970396822222:layer:dev-devDependencies:2"
              ]
            },
            "DependsOn": [
              "AddUnderscorescheduleLogGroup"
            ]
          },
          "AddUnderscorescheduleLambdaVersionyV9yN5jIKIIFp4A9c50QPUOPBuLP1QUPnfXG62Z5A": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AddUnderscorescheduleLambdaFunction"
              },
              "CodeSha256": "LW1kaH9Y2ZUIM6bOHW7v1/gWGDg8ZVXk6wgu+0Xwlf8="
            }
          },
          "DeleteUnderscorescheduleLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/weather/dev/1590108345479-2020-05-22T00:45:45.479Z/delete_schedule.zip"
              },
              "FunctionName": "weather-dev-delete_schedule",
              "Handler": "delete_schedule.lambda_handler",
              "MemorySize": 128,
              "Role": "arn:aws:iam::970396822222:role/lambda_basic_execution",
              "Runtime": "python3.7",
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "stage": "dev"
                }
              },
              "Layers": [
                "arn:aws:lambda:ap-southeast-2:970396822222:layer:dev-devDependencies:2"
              ]
            },
            "DependsOn": [
              "DeleteUnderscorescheduleLogGroup"
            ]
          },
          "DeleteUnderscorescheduleLambdaVersionkoikUM5T9sCbtMngQB75g8NpVo8adsbGF3y9nIVh1PM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteUnderscorescheduleLambdaFunction"
              },
              "CodeSha256": "LW1kaH9Y2ZUIM6bOHW7v1/gWGDg8ZVXk6wgu+0Xwlf8="
            }
          },
          "DashboardLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/weather/dev/1590108345479-2020-05-22T00:45:45.479Z/dashboard.zip"
              },
              "FunctionName": "weather-dev-dashboard",
              "Handler": "main.lambda_handler",
              "MemorySize": 128,
              "Role": "arn:aws:iam::970396822222:role/lambda_basic_execution",
              "Runtime": "python3.7",
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "stage": "dev"
                }
              },
              "Layers": [
                "arn:aws:lambda:ap-southeast-2:970396822222:layer:dev-devDependencies:2"
              ]
            },
            "DependsOn": [
              "DashboardLogGroup"
            ]
          },
          "DashboardLambdaVersionOatdOnAfSl0x6UiTOoQ0yhNY35qaOVvV0NdEkpaigU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DashboardLambdaFunction"
              },
              "CodeSha256": "LW1kaH9Y2ZUIM6bOHW7v1/gWGDg8ZVXk6wgu+0Xwlf8="
            }
          },
          "ProfileUnderscorepictureLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/weather/dev/1590108345479-2020-05-22T00:45:45.479Z/profile_picture.zip"
              },
              "FunctionName": "weather-dev-profile_picture",
              "Handler": "profile_picture.lambda_handler",
              "MemorySize": 128,
              "Role": "arn:aws:iam::970396822222:role/lambda_basic_execution",
              "Runtime": "python3.7",
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "stage": "dev"
                }
              },
              "Layers": [
                "arn:aws:lambda:ap-southeast-2:970396822222:layer:dev-devDependencies:2"
              ]
            },
            "DependsOn": [
              "ProfileUnderscorepictureLogGroup"
            ]
          },
          "ProfileUnderscorepictureLambdaVersionlEo220uUucWjY4ONZTVBimIP56vEge7qMV3I5RYg7E": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ProfileUnderscorepictureLambdaFunction"
              },
              "CodeSha256": "LW1kaH9Y2ZUIM6bOHW7v1/gWGDg8ZVXk6wgu+0Xwlf8="
            }
          },
          "UpdateUnderscorescheduleLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/weather/dev/1590108345479-2020-05-22T00:45:45.479Z/update_schedule.zip"
              },
              "FunctionName": "weather-dev-update_schedule",
              "Handler": "update_schedule.lambda_handler",
              "MemorySize": 128,
              "Role": "arn:aws:iam::970396822222:role/lambda_basic_execution",
              "Runtime": "python3.7",
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "stage": "dev"
                }
              },
              "Layers": [
                "arn:aws:lambda:ap-southeast-2:970396822222:layer:dev-devDependencies:2"
              ]
            },
            "DependsOn": [
              "UpdateUnderscorescheduleLogGroup"
            ]
          },
          "UpdateUnderscorescheduleLambdaVersionxts6351HZB3LubRQ3dBIEvOv90pWNMwsSjvAcmACg8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateUnderscorescheduleLambdaFunction"
              },
              "CodeSha256": "LW1kaH9Y2ZUIM6bOHW7v1/gWGDg8ZVXk6wgu+0Xwlf8="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-weather",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceAddschedule": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "add_schedule",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceDeleteschedule": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "delete_schedule",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceDashboard": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "dashboard",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceProfilepicture": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "profile_picture",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUpdateschedule": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "update_schedule",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAddscheduleOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAddschedule"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodDeletescheduleOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceDeleteschedule"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodDashboardOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceDashboard"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodProfilepictureOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceProfilepicture"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUpdatescheduleOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceUpdateschedule"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAddschedulePost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAddschedule"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": true,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AddUnderscorescheduleLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodDeletescheduleDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceDeleteschedule"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": true,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteUnderscorescheduleLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodDashboardPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceDashboard"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": true,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DashboardLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodProfilepicturePost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceProfilepicture"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": true,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ProfileUnderscorepictureLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodUpdateschedulePut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUpdateschedule"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": true,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateUnderscorescheduleLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayDeployment1590108344108": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodAddscheduleOptions",
              "ApiGatewayMethodDeletescheduleOptions",
              "ApiGatewayMethodDashboardOptions",
              "ApiGatewayMethodProfilepictureOptions",
              "ApiGatewayMethodUpdatescheduleOptions",
              "ApiGatewayMethodAddschedulePost",
              "ApiGatewayMethodDeletescheduleDelete",
              "ApiGatewayMethodDashboardPost",
              "ApiGatewayMethodProfilepicturePost",
              "ApiGatewayMethodUpdateschedulePut"
            ]
          },
          "AddUnderscorescheduleLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AddUnderscorescheduleLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeleteUnderscorescheduleLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteUnderscorescheduleLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DashboardLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DashboardLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ProfileUnderscorepictureLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ProfileUnderscorepictureLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateUnderscorescheduleLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateUnderscorescheduleLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          },
          "AddUnderscorescheduleLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AddUnderscorescheduleLambdaVersionyV9yN5jIKIIFp4A9c50QPUOPBuLP1QUPnfXG62Z5A"
            }
          },
          "DeleteUnderscorescheduleLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteUnderscorescheduleLambdaVersionkoikUM5T9sCbtMngQB75g8NpVo8adsbGF3y9nIVh1PM"
            }
          },
          "DashboardLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DashboardLambdaVersionOatdOnAfSl0x6UiTOoQ0yhNY35qaOVvV0NdEkpaigU"
            }
          },
          "ProfileUnderscorepictureLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ProfileUnderscorepictureLambdaVersionlEo220uUucWjY4ONZTVBimIP56vEge7qMV3I5RYg7E"
            }
          },
          "UpdateUnderscorescheduleLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateUnderscorescheduleLambdaVersionxts6351HZB3LubRQ3dBIEvOv90pWNMwsSjvAcmACg8"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "CustomDomainMaping": {
        "domainName": "backend.rmitassignment.tk",
        "endpointType": "Regional",
        "certificateArn": "arn:aws:acm:ap-southeast-2:970396822222:certificate/d3f63a80-691e-47fc-bf04-fe9ca04e70e9",
        "certificateName": "*.rmitassignment.tk",
        "createRoute53Record": true,
        "hostedZoneId": "Z2RPCDW04V8134"
      },
      "enabledlambdaevents": true,
      "enabledCloudWatchevents": "ENABLED",
      "APIKeys": {
        "ServerlessCoreAPIKey": "RestAPIKey",
        "SupportAPIKey": "assign_api_key"
      },
      "UsagePlans": {
        "ASSIGNAPIUsage": "ASSIGNAPIUsage"
      },
      "stage": "dev",
      "isremoteoldstructure": "0",
      "logRetentionInDays": 5,
      "account": 970396822222,
      "customAuthorizer": "rest_auth",
      "region": "ap-southeast-2",
      "roles": {
        "basicExecution": "lambda_basic_execution"
      }
    },
    "pluginsData": {},
    "functions": {
      "add_schedule": {
        "handler": "add_schedule.lambda_handler",
        "layers": {
          "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AddUnderscorescheduleLambdaFunction\"][\"Properties\"][\"Layers\"]"
        },
        "environment": {
          "stage": "dev"
        },
        "memorySize": 128,
        "timeout": 30,
        "logRetentionInDays": 5,
        "role": "arn:aws:iam::970396822222:role/lambda_basic_execution",
        "events": [
          {
            "http": {
              "path": "add_schedule",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "method": "post",
              "private": true,
              "integration": "AWS_PROXY"
            }
          }
        ],
        "package": {
          "include": [
            "add_schedule.py"
          ],
          "artifact": "/Users/ali/Desktop/Assignmentproject/code/backend/dashboard/.serverless/add_schedule.zip"
        },
        "name": "weather-dev-add_schedule",
        "memory": 128,
        "runtime": "python3.7",
        "vpc": {},
        "versionLogicalId": "AddUnderscorescheduleLambdaVersionyV9yN5jIKIIFp4A9c50QPUOPBuLP1QUPnfXG62Z5A"
      },
      "delete_schedule": {
        "handler": "delete_schedule.lambda_handler",
        "layers": {
          "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"DeleteUnderscorescheduleLambdaFunction\"][\"Properties\"][\"Layers\"]"
        },
        "environment": {
          "stage": "dev"
        },
        "memorySize": 128,
        "timeout": 30,
        "logRetentionInDays": 5,
        "role": "arn:aws:iam::970396822222:role/lambda_basic_execution",
        "events": [
          {
            "http": {
              "path": "delete_schedule",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "method": "delete",
              "private": true,
              "integration": "AWS_PROXY"
            }
          }
        ],
        "package": {
          "include": [
            "delete_schedule.py"
          ],
          "artifact": "/Users/ali/Desktop/Assignmentproject/code/backend/dashboard/.serverless/delete_schedule.zip"
        },
        "name": "weather-dev-delete_schedule",
        "memory": 128,
        "runtime": "python3.7",
        "vpc": {},
        "versionLogicalId": "DeleteUnderscorescheduleLambdaVersionkoikUM5T9sCbtMngQB75g8NpVo8adsbGF3y9nIVh1PM"
      },
      "dashboard": {
        "handler": "main.lambda_handler",
        "layers": {
          "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"DashboardLambdaFunction\"][\"Properties\"][\"Layers\"]"
        },
        "environment": {
          "stage": "dev"
        },
        "memorySize": 128,
        "timeout": 30,
        "logRetentionInDays": 5,
        "role": "arn:aws:iam::970396822222:role/lambda_basic_execution",
        "events": [
          {
            "http": {
              "path": "dashboard",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "method": "post",
              "private": true,
              "integration": "AWS_PROXY"
            }
          }
        ],
        "package": {
          "include": [
            "main.py"
          ],
          "artifact": "/Users/ali/Desktop/Assignmentproject/code/backend/dashboard/.serverless/dashboard.zip"
        },
        "name": "weather-dev-dashboard",
        "memory": 128,
        "runtime": "python3.7",
        "vpc": {},
        "versionLogicalId": "DashboardLambdaVersionOatdOnAfSl0x6UiTOoQ0yhNY35qaOVvV0NdEkpaigU"
      },
      "profile_picture": {
        "handler": "profile_picture.lambda_handler",
        "layers": {
          "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ProfileUnderscorepictureLambdaFunction\"][\"Properties\"][\"Layers\"]"
        },
        "environment": {
          "stage": "dev"
        },
        "memorySize": 128,
        "timeout": 30,
        "logRetentionInDays": 5,
        "role": "arn:aws:iam::970396822222:role/lambda_basic_execution",
        "events": [
          {
            "http": {
              "path": "profile_picture",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "method": "post",
              "private": true,
              "integration": "AWS_PROXY"
            }
          }
        ],
        "package": {
          "include": [
            "main.py"
          ],
          "artifact": "/Users/ali/Desktop/Assignmentproject/code/backend/dashboard/.serverless/profile_picture.zip"
        },
        "name": "weather-dev-profile_picture",
        "memory": 128,
        "runtime": "python3.7",
        "vpc": {},
        "versionLogicalId": "ProfileUnderscorepictureLambdaVersionlEo220uUucWjY4ONZTVBimIP56vEge7qMV3I5RYg7E"
      },
      "update_schedule": {
        "handler": "update_schedule.lambda_handler",
        "layers": {
          "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"UpdateUnderscorescheduleLambdaFunction\"][\"Properties\"][\"Layers\"]"
        },
        "environment": {
          "stage": "dev"
        },
        "memorySize": 128,
        "timeout": 30,
        "logRetentionInDays": 5,
        "role": "arn:aws:iam::970396822222:role/lambda_basic_execution",
        "events": [
          {
            "http": {
              "path": "update_schedule",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "method": "put",
              "private": true,
              "integration": "AWS_PROXY"
            }
          }
        ],
        "package": {
          "include": [
            "update_schedule.py"
          ],
          "artifact": "/Users/ali/Desktop/Assignmentproject/code/backend/dashboard/.serverless/update_schedule.zip"
        },
        "name": "weather-dev-update_schedule",
        "memory": 128,
        "runtime": "python3.7",
        "vpc": {},
        "versionLogicalId": "UpdateUnderscorescheduleLambdaVersionxts6351HZB3LubRQ3dBIEvOv90pWNMwsSjvAcmACg8"
      }
    },
    "serviceFilename": "serverless.yml",
    "layers": {},
    "isDashboardMonitoringPreconfigured": false
  },
  "package": {
    "individually": true,
    "artifactDirectoryName": "serverless/weather/dev/1590108345479-2020-05-22T00:45:45.479Z",
    "artifact": ""
  }
}